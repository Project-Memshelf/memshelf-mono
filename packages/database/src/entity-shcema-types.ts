/**
 * Generated Entity Schema Types and Validators
 *
 * This file exports all Zod schemas and TypeScript types for database entities.
 * Generated automatically by @repo/typeorm-zod codegen.
 *
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten on next generation.
 *
 * To regenerate: bun run codegen:schemas
 */

import { createEntitySchemas } from '@repo/typeorm-zod';
import type { z } from 'zod';
// Entity imports
import {
    DiffEntity,
    LinkEntity,
    NoteEntity,
    NoteTagEntity,
    TagEntity,
    UserEntity,
    UserPermissionEntity,
    WorkspaceEntity,
    WorkspaceTagEntity,
} from './entities';

// Generated schema collections
export const UserSchemas = createEntitySchemas(UserEntity);
export const WorkspaceSchemas = createEntitySchemas(WorkspaceEntity);
export const NoteSchemas = createEntitySchemas(NoteEntity);
export const TagSchemas = createEntitySchemas(TagEntity);
export const LinkSchemas = createEntitySchemas(LinkEntity);
export const DiffSchemas = createEntitySchemas(DiffEntity);
export const NoteTagSchemas = createEntitySchemas(NoteTagEntity);
export const WorkspaceTagSchemas = createEntitySchemas(WorkspaceTagEntity);
export const UserPermissionSchemas = createEntitySchemas(UserPermissionEntity);

// Exported TypeScript types for each entity
export type User = z.infer<typeof UserSchemas.full>;
export type CreateUserDto = z.infer<typeof UserSchemas.create>;
export type UpdateUserDto = z.infer<typeof UserSchemas.update>;
export type PatchUserDto = z.infer<typeof UserSchemas.patch>;
export type UserQueryDto = z.infer<typeof UserSchemas.query>;

export type Workspace = z.infer<typeof WorkspaceSchemas.full>;
export type CreateWorkspaceDto = z.infer<typeof WorkspaceSchemas.create>;
export type UpdateWorkspaceDto = z.infer<typeof WorkspaceSchemas.update>;
export type PatchWorkspaceDto = z.infer<typeof WorkspaceSchemas.patch>;
export type WorkspaceQueryDto = z.infer<typeof WorkspaceSchemas.query>;

export type Note = z.infer<typeof NoteSchemas.full>;
export type CreateNoteDto = z.infer<typeof NoteSchemas.create>;
export type UpdateNoteDto = z.infer<typeof NoteSchemas.update>;
export type PatchNoteDto = z.infer<typeof NoteSchemas.patch>;
export type NoteQueryDto = z.infer<typeof NoteSchemas.query>;

export type Tag = z.infer<typeof TagSchemas.full>;
export type CreateTagDto = z.infer<typeof TagSchemas.create>;
export type UpdateTagDto = z.infer<typeof TagSchemas.update>;
export type PatchTagDto = z.infer<typeof TagSchemas.patch>;
export type TagQueryDto = z.infer<typeof TagSchemas.query>;

export type Link = z.infer<typeof LinkSchemas.full>;
export type CreateLinkDto = z.infer<typeof LinkSchemas.create>;
export type UpdateLinkDto = z.infer<typeof LinkSchemas.update>;
export type PatchLinkDto = z.infer<typeof LinkSchemas.patch>;
export type LinkQueryDto = z.infer<typeof LinkSchemas.query>;

export type Diff = z.infer<typeof DiffSchemas.full>;
export type CreateDiffDto = z.infer<typeof DiffSchemas.create>;
export type UpdateDiffDto = z.infer<typeof DiffSchemas.update>;
export type PatchDiffDto = z.infer<typeof DiffSchemas.patch>;
export type DiffQueryDto = z.infer<typeof DiffSchemas.query>;

export type NoteTag = z.infer<typeof NoteTagSchemas.full>;
export type CreateNoteTagDto = z.infer<typeof NoteTagSchemas.create>;
export type UpdateNoteTagDto = z.infer<typeof NoteTagSchemas.update>;
export type PatchNoteTagDto = z.infer<typeof NoteTagSchemas.patch>;
export type NoteTagQueryDto = z.infer<typeof NoteTagSchemas.query>;

export type WorkspaceTag = z.infer<typeof WorkspaceTagSchemas.full>;
export type CreateWorkspaceTagDto = z.infer<typeof WorkspaceTagSchemas.create>;
export type UpdateWorkspaceTagDto = z.infer<typeof WorkspaceTagSchemas.update>;
export type PatchWorkspaceTagDto = z.infer<typeof WorkspaceTagSchemas.patch>;
export type WorkspaceTagQueryDto = z.infer<typeof WorkspaceTagSchemas.query>;

export type UserPermission = z.infer<typeof UserPermissionSchemas.full>;
export type CreateUserPermissionDto = z.infer<typeof UserPermissionSchemas.create>;
export type UpdateUserPermissionDto = z.infer<typeof UserPermissionSchemas.update>;
export type PatchUserPermissionDto = z.infer<typeof UserPermissionSchemas.patch>;
export type UserPermissionQueryDto = z.infer<typeof UserPermissionSchemas.query>;

// Convenience exports - all schemas in one object
export const AllSchemas = {
    User: UserSchemas,
    Workspace: WorkspaceSchemas,
    Note: NoteSchemas,
    Tag: TagSchemas,
    Link: LinkSchemas,
    Diff: DiffSchemas,
    NoteTag: NoteTagSchemas,
    WorkspaceTag: WorkspaceTagSchemas,
    UserPermission: UserPermissionSchemas,
} as const;

// Schema validation helpers
export const validateCreateUser = (data: unknown): CreateUserDto => UserSchemas.create.parse(data);
export const validateUpdateUser = (data: unknown): UpdateUserDto => UserSchemas.update.parse(data);
export const validatePatchUser = (data: unknown): PatchUserDto => UserSchemas.patch.parse(data);
export const validateUserQuery = (data: unknown): UserQueryDto => UserSchemas.query.parse(data);

export const validateCreateWorkspace = (data: unknown): CreateWorkspaceDto => WorkspaceSchemas.create.parse(data);
export const validateUpdateWorkspace = (data: unknown): UpdateWorkspaceDto => WorkspaceSchemas.update.parse(data);
export const validatePatchWorkspace = (data: unknown): PatchWorkspaceDto => WorkspaceSchemas.patch.parse(data);
export const validateWorkspaceQuery = (data: unknown): WorkspaceQueryDto => WorkspaceSchemas.query.parse(data);

export const validateCreateNote = (data: unknown): CreateNoteDto => NoteSchemas.create.parse(data);
export const validateUpdateNote = (data: unknown): UpdateNoteDto => NoteSchemas.update.parse(data);
export const validatePatchNote = (data: unknown): PatchNoteDto => NoteSchemas.patch.parse(data);
export const validateNoteQuery = (data: unknown): NoteQueryDto => NoteSchemas.query.parse(data);

export const validateCreateTag = (data: unknown): CreateTagDto => TagSchemas.create.parse(data);
export const validateUpdateTag = (data: unknown): UpdateTagDto => TagSchemas.update.parse(data);
export const validatePatchTag = (data: unknown): PatchTagDto => TagSchemas.patch.parse(data);
export const validateTagQuery = (data: unknown): TagQueryDto => TagSchemas.query.parse(data);

export const validateCreateLink = (data: unknown): CreateLinkDto => LinkSchemas.create.parse(data);
export const validateUpdateLink = (data: unknown): UpdateLinkDto => LinkSchemas.update.parse(data);
export const validatePatchLink = (data: unknown): PatchLinkDto => LinkSchemas.patch.parse(data);
export const validateLinkQuery = (data: unknown): LinkQueryDto => LinkSchemas.query.parse(data);

export const validateCreateDiff = (data: unknown): CreateDiffDto => DiffSchemas.create.parse(data);
export const validateUpdateDiff = (data: unknown): UpdateDiffDto => DiffSchemas.update.parse(data);
export const validatePatchDiff = (data: unknown): PatchDiffDto => DiffSchemas.patch.parse(data);
export const validateDiffQuery = (data: unknown): DiffQueryDto => DiffSchemas.query.parse(data);

export const validateCreateNoteTag = (data: unknown): CreateNoteTagDto => NoteTagSchemas.create.parse(data);
export const validateUpdateNoteTag = (data: unknown): UpdateNoteTagDto => NoteTagSchemas.update.parse(data);
export const validatePatchNoteTag = (data: unknown): PatchNoteTagDto => NoteTagSchemas.patch.parse(data);
export const validateNoteTagQuery = (data: unknown): NoteTagQueryDto => NoteTagSchemas.query.parse(data);

export const validateCreateWorkspaceTag = (data: unknown): CreateWorkspaceTagDto =>
    WorkspaceTagSchemas.create.parse(data);
export const validateUpdateWorkspaceTag = (data: unknown): UpdateWorkspaceTagDto =>
    WorkspaceTagSchemas.update.parse(data);
export const validatePatchWorkspaceTag = (data: unknown): PatchWorkspaceTagDto => WorkspaceTagSchemas.patch.parse(data);
export const validateWorkspaceTagQuery = (data: unknown): WorkspaceTagQueryDto => WorkspaceTagSchemas.query.parse(data);

export const validateCreateUserPermission = (data: unknown): CreateUserPermissionDto =>
    UserPermissionSchemas.create.parse(data);
export const validateUpdateUserPermission = (data: unknown): UpdateUserPermissionDto =>
    UserPermissionSchemas.update.parse(data);
export const validatePatchUserPermission = (data: unknown): PatchUserPermissionDto =>
    UserPermissionSchemas.patch.parse(data);
export const validateUserPermissionQuery = (data: unknown): UserPermissionQueryDto =>
    UserPermissionSchemas.query.parse(data);
